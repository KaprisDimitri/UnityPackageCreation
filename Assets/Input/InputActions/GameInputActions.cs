//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputActions/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""FirstPersonActionMap"",
            ""id"": ""1415d9ba-b103-4681-b247-fb77cf7dadb6"",
            ""actions"": [
                {
                    ""name"": ""MovingAction2"",
                    ""type"": ""Value"",
                    ""id"": ""db66d189-2123-4d6f-a10b-b466bb9784fb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateAction"",
                    ""type"": ""Value"",
                    ""id"": ""cd5797f2-2339-495b-a27d-bfd0784ea2c4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Value"",
                    ""id"": ""60b12223-373c-4f69-bdba-d32dbec51978"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7d33b0a0-b92a-4053-835f-7968de873ce7"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingAction2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""KeyBoardBinding"",
                    ""id"": ""2ecbdcee-5bc1-4ade-a35e-ec1d698772ef"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingAction2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c9bfc858-4092-48cf-ac20-c9858e4af494"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingAction2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""48ab4c38-1c41-481c-a361-0082b41f6a40"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingAction2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ce9b7bfa-1800-4ad6-9937-1b09ba9079f9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingAction2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0f715c9f-3201-480c-b8de-81e1d99ca75c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingAction2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5ecce041-b338-45a3-a90d-f7d8c3283390"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37e08480-61a7-4827-b02d-2610aa9771da"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b27ae648-b24a-4666-82a9-b6f9569c4616"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a71fd6ef-cc44-4ce9-8e28-ae3b411aea82"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InMenuActionMap"",
            ""id"": ""299ef729-f642-466d-9871-2d01f16ca6fc"",
            ""actions"": [
                {
                    ""name"": ""fesfesfe"",
                    ""type"": ""Button"",
                    ""id"": ""195b3516-58b2-42c2-b18c-927edac7b7cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ValidAction"",
                    ""type"": ""Value"",
                    ""id"": ""b6f0b0fa-c1f0-4769-9424-53a2d23ae977"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SalutSalut"",
                    ""type"": ""Value"",
                    ""id"": ""b9844271-76fc-437c-bc91-e87d27e98062"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e02fe2ff-8a2d-4a5a-9130-70f9a345f9ed"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""fesfesfe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49a58294-5934-4ae5-a0df-be3d46254f5a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ValidAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af797b77-5ad9-4e75-910f-df28ad2d418e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SalutSalut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""testing"",
            ""id"": ""3a8cf4d5-7dc6-47a6-b86f-cd4a7524c3e9"",
            ""actions"": [
                {
                    ""name"": ""Laction"",
                    ""type"": ""Button"",
                    ""id"": ""dd0be47e-71cb-4a9a-8625-7582ca2a7c5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""829ec8b9-d5b2-4466-946d-07911073fd2c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Laction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FirstPersonActionMap
        m_FirstPersonActionMap = asset.FindActionMap("FirstPersonActionMap", throwIfNotFound: true);
        m_FirstPersonActionMap_MovingAction2 = m_FirstPersonActionMap.FindAction("MovingAction2", throwIfNotFound: true);
        m_FirstPersonActionMap_RotateAction = m_FirstPersonActionMap.FindAction("RotateAction", throwIfNotFound: true);
        m_FirstPersonActionMap_Sprint = m_FirstPersonActionMap.FindAction("Sprint", throwIfNotFound: true);
        // InMenuActionMap
        m_InMenuActionMap = asset.FindActionMap("InMenuActionMap", throwIfNotFound: true);
        m_InMenuActionMap_fesfesfe = m_InMenuActionMap.FindAction("fesfesfe", throwIfNotFound: true);
        m_InMenuActionMap_ValidAction = m_InMenuActionMap.FindAction("ValidAction", throwIfNotFound: true);
        m_InMenuActionMap_SalutSalut = m_InMenuActionMap.FindAction("SalutSalut", throwIfNotFound: true);
        // testing
        m_testing = asset.FindActionMap("testing", throwIfNotFound: true);
        m_testing_Laction = m_testing.FindAction("Laction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FirstPersonActionMap
    private readonly InputActionMap m_FirstPersonActionMap;
    private List<IFirstPersonActionMapActions> m_FirstPersonActionMapActionsCallbackInterfaces = new List<IFirstPersonActionMapActions>();
    private readonly InputAction m_FirstPersonActionMap_MovingAction2;
    private readonly InputAction m_FirstPersonActionMap_RotateAction;
    private readonly InputAction m_FirstPersonActionMap_Sprint;
    public struct FirstPersonActionMapActions
    {
        private @GameInputActions m_Wrapper;
        public FirstPersonActionMapActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovingAction2 => m_Wrapper.m_FirstPersonActionMap_MovingAction2;
        public InputAction @RotateAction => m_Wrapper.m_FirstPersonActionMap_RotateAction;
        public InputAction @Sprint => m_Wrapper.m_FirstPersonActionMap_Sprint;
        public InputActionMap Get() { return m_Wrapper.m_FirstPersonActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FirstPersonActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IFirstPersonActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_FirstPersonActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FirstPersonActionMapActionsCallbackInterfaces.Add(instance);
            @MovingAction2.started += instance.OnMovingAction2;
            @MovingAction2.performed += instance.OnMovingAction2;
            @MovingAction2.canceled += instance.OnMovingAction2;
            @RotateAction.started += instance.OnRotateAction;
            @RotateAction.performed += instance.OnRotateAction;
            @RotateAction.canceled += instance.OnRotateAction;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
        }

        private void UnregisterCallbacks(IFirstPersonActionMapActions instance)
        {
            @MovingAction2.started -= instance.OnMovingAction2;
            @MovingAction2.performed -= instance.OnMovingAction2;
            @MovingAction2.canceled -= instance.OnMovingAction2;
            @RotateAction.started -= instance.OnRotateAction;
            @RotateAction.performed -= instance.OnRotateAction;
            @RotateAction.canceled -= instance.OnRotateAction;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
        }

        public void RemoveCallbacks(IFirstPersonActionMapActions instance)
        {
            if (m_Wrapper.m_FirstPersonActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFirstPersonActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_FirstPersonActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FirstPersonActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FirstPersonActionMapActions @FirstPersonActionMap => new FirstPersonActionMapActions(this);

    // InMenuActionMap
    private readonly InputActionMap m_InMenuActionMap;
    private List<IInMenuActionMapActions> m_InMenuActionMapActionsCallbackInterfaces = new List<IInMenuActionMapActions>();
    private readonly InputAction m_InMenuActionMap_fesfesfe;
    private readonly InputAction m_InMenuActionMap_ValidAction;
    private readonly InputAction m_InMenuActionMap_SalutSalut;
    public struct InMenuActionMapActions
    {
        private @GameInputActions m_Wrapper;
        public InMenuActionMapActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @fesfesfe => m_Wrapper.m_InMenuActionMap_fesfesfe;
        public InputAction @ValidAction => m_Wrapper.m_InMenuActionMap_ValidAction;
        public InputAction @SalutSalut => m_Wrapper.m_InMenuActionMap_SalutSalut;
        public InputActionMap Get() { return m_Wrapper.m_InMenuActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InMenuActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IInMenuActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_InMenuActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InMenuActionMapActionsCallbackInterfaces.Add(instance);
            @fesfesfe.started += instance.OnFesfesfe;
            @fesfesfe.performed += instance.OnFesfesfe;
            @fesfesfe.canceled += instance.OnFesfesfe;
            @ValidAction.started += instance.OnValidAction;
            @ValidAction.performed += instance.OnValidAction;
            @ValidAction.canceled += instance.OnValidAction;
            @SalutSalut.started += instance.OnSalutSalut;
            @SalutSalut.performed += instance.OnSalutSalut;
            @SalutSalut.canceled += instance.OnSalutSalut;
        }

        private void UnregisterCallbacks(IInMenuActionMapActions instance)
        {
            @fesfesfe.started -= instance.OnFesfesfe;
            @fesfesfe.performed -= instance.OnFesfesfe;
            @fesfesfe.canceled -= instance.OnFesfesfe;
            @ValidAction.started -= instance.OnValidAction;
            @ValidAction.performed -= instance.OnValidAction;
            @ValidAction.canceled -= instance.OnValidAction;
            @SalutSalut.started -= instance.OnSalutSalut;
            @SalutSalut.performed -= instance.OnSalutSalut;
            @SalutSalut.canceled -= instance.OnSalutSalut;
        }

        public void RemoveCallbacks(IInMenuActionMapActions instance)
        {
            if (m_Wrapper.m_InMenuActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInMenuActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_InMenuActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InMenuActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InMenuActionMapActions @InMenuActionMap => new InMenuActionMapActions(this);

    // testing
    private readonly InputActionMap m_testing;
    private List<ITestingActions> m_TestingActionsCallbackInterfaces = new List<ITestingActions>();
    private readonly InputAction m_testing_Laction;
    public struct TestingActions
    {
        private @GameInputActions m_Wrapper;
        public TestingActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Laction => m_Wrapper.m_testing_Laction;
        public InputActionMap Get() { return m_Wrapper.m_testing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestingActions set) { return set.Get(); }
        public void AddCallbacks(ITestingActions instance)
        {
            if (instance == null || m_Wrapper.m_TestingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestingActionsCallbackInterfaces.Add(instance);
            @Laction.started += instance.OnLaction;
            @Laction.performed += instance.OnLaction;
            @Laction.canceled += instance.OnLaction;
        }

        private void UnregisterCallbacks(ITestingActions instance)
        {
            @Laction.started -= instance.OnLaction;
            @Laction.performed -= instance.OnLaction;
            @Laction.canceled -= instance.OnLaction;
        }

        public void RemoveCallbacks(ITestingActions instance)
        {
            if (m_Wrapper.m_TestingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestingActions instance)
        {
            foreach (var item in m_Wrapper.m_TestingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestingActions @testing => new TestingActions(this);
    public interface IFirstPersonActionMapActions
    {
        void OnMovingAction2(InputAction.CallbackContext context);
        void OnRotateAction(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
    }
    public interface IInMenuActionMapActions
    {
        void OnFesfesfe(InputAction.CallbackContext context);
        void OnValidAction(InputAction.CallbackContext context);
        void OnSalutSalut(InputAction.CallbackContext context);
    }
    public interface ITestingActions
    {
        void OnLaction(InputAction.CallbackContext context);
    }
}
