//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputActions/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""GameActionMap"",
            ""id"": ""e2a70b0e-3677-47a7-ae20-48b3d1892c7c"",
            ""actions"": [
                {
                    ""name"": ""MovingVector"",
                    ""type"": ""Value"",
                    ""id"": ""05ace229-2b33-4ca6-814e-40a3cdae5aa8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9cd170cb-fe55-4422-b75b-3ad2669d7ba2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingVector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""60c70cca-0c09-47a3-a135-591ed3118f44"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingVector"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""aad1223a-be35-4780-aa7c-ae181498b01e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingVector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f007e273-733f-474f-ad3b-fc95dc2b165e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingVector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b91222b0-f655-456b-9c93-ff30f6242f86"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingVector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9cf656bd-ec67-4d8a-940c-b4b6931a4ddb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovingVector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ExempleActionMap"",
            ""id"": ""acb3676d-014c-4b0b-9147-2d180e79d2ed"",
            ""actions"": [
                {
                    ""name"": ""Moving"",
                    ""type"": ""Value"",
                    ""id"": ""0aac5bae-8f2f-4e8f-ae88-5143da2d1327"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cb3ec486-9966-4241-aca0-e692f91a74de"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a757de55-832d-4348-8def-ca259de15c5b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2981e6c5-2549-4226-aa17-3bbcaaa3b7a7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ae53b051-5e10-4fec-9b2b-8c43059a4dca"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0ff67b8a-a514-414f-8ea6-c81a53923eca"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ff9c638f-4b3f-4975-acfb-d6a922d10a24"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameActionMap
        m_GameActionMap = asset.FindActionMap("GameActionMap", throwIfNotFound: true);
        m_GameActionMap_MovingVector = m_GameActionMap.FindAction("MovingVector", throwIfNotFound: true);
        // ExempleActionMap
        m_ExempleActionMap = asset.FindActionMap("ExempleActionMap", throwIfNotFound: true);
        m_ExempleActionMap_Moving = m_ExempleActionMap.FindAction("Moving", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameActionMap
    private readonly InputActionMap m_GameActionMap;
    private List<IGameActionMapActions> m_GameActionMapActionsCallbackInterfaces = new List<IGameActionMapActions>();
    private readonly InputAction m_GameActionMap_MovingVector;
    public struct GameActionMapActions
    {
        private @GameInputActions m_Wrapper;
        public GameActionMapActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovingVector => m_Wrapper.m_GameActionMap_MovingVector;
        public InputActionMap Get() { return m_Wrapper.m_GameActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IGameActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionMapActionsCallbackInterfaces.Add(instance);
            @MovingVector.started += instance.OnMovingVector;
            @MovingVector.performed += instance.OnMovingVector;
            @MovingVector.canceled += instance.OnMovingVector;
        }

        private void UnregisterCallbacks(IGameActionMapActions instance)
        {
            @MovingVector.started -= instance.OnMovingVector;
            @MovingVector.performed -= instance.OnMovingVector;
            @MovingVector.canceled -= instance.OnMovingVector;
        }

        public void RemoveCallbacks(IGameActionMapActions instance)
        {
            if (m_Wrapper.m_GameActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActionMapActions @GameActionMap => new GameActionMapActions(this);

    // ExempleActionMap
    private readonly InputActionMap m_ExempleActionMap;
    private List<IExempleActionMapActions> m_ExempleActionMapActionsCallbackInterfaces = new List<IExempleActionMapActions>();
    private readonly InputAction m_ExempleActionMap_Moving;
    public struct ExempleActionMapActions
    {
        private @GameInputActions m_Wrapper;
        public ExempleActionMapActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moving => m_Wrapper.m_ExempleActionMap_Moving;
        public InputActionMap Get() { return m_Wrapper.m_ExempleActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ExempleActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IExempleActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_ExempleActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ExempleActionMapActionsCallbackInterfaces.Add(instance);
            @Moving.started += instance.OnMoving;
            @Moving.performed += instance.OnMoving;
            @Moving.canceled += instance.OnMoving;
        }

        private void UnregisterCallbacks(IExempleActionMapActions instance)
        {
            @Moving.started -= instance.OnMoving;
            @Moving.performed -= instance.OnMoving;
            @Moving.canceled -= instance.OnMoving;
        }

        public void RemoveCallbacks(IExempleActionMapActions instance)
        {
            if (m_Wrapper.m_ExempleActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IExempleActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_ExempleActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ExempleActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ExempleActionMapActions @ExempleActionMap => new ExempleActionMapActions(this);
    public interface IGameActionMapActions
    {
        void OnMovingVector(InputAction.CallbackContext context);
    }
    public interface IExempleActionMapActions
    {
        void OnMoving(InputAction.CallbackContext context);
    }
}
